position=position_identity()
) + layer(
data=diamonds,
mapping=aes(x=cut, y=price),
stat="smooth", stat_params=list(),
geom="smooth", geom_params=list(),
position=position_identity()
) +
layer(
data=diamonds,
mapping=aes(x=color),
stat="bin",
stat_params=list(),
geom="bar",
geom_params=list(),
position=position_identity()
)
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
require(extrafont)
require(ggplot2)
options(java.parameters="-Xmx2g")
ggplot() +
coord_cartesian() +
#scale_x_continuous() +
scale_x_discrete() +
scale_y_continuous() +
scale_color_hue() +
#facet_wrap(~cut) +
#facet_grid(clarity~cut, labeller=label_both) +
facet_grid(clarity~cut, labeller=label_both) +
labs(title='Diamonds') +
labs(x="Cut", y="Price") +
theme_grey() +
theme(plot.background = element_rect(fill="green", colour=NA)) +
theme(plot.title=element_text(size=30, face="bold", vjust=1, family="Bauhaus93")) +
theme(axis.ticks.y=element_blank(), axis.text.y=element_blank()) +
theme(axis.text.x=element_text(angle=50, size=8, vjust=0.5)) +
theme(
axis.title.x=element_text(color="forestgreen", vjust=0.35),
axis.title.y=element_text(color="cadetblue", vjust=0.35)
) +
layer(data=diamonds,
mapping=aes(x=cut, y=price, color=color),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
#position=position_dodge()
) +
layer(data=diamonds,
mapping=aes(x=cut, y=price),
stat="boxplot",
stat_params=list(),
geom="boxplot",
geom_params=list(color="red", fill="red", alpha=0),
position=position_identity()
) + layer(
data=diamonds,
mapping=aes(x=cut, y=price),
stat="smooth", stat_params=list(),
geom="smooth", geom_params=list(),
position=position_identity()
) +
layer(
data=diamonds,
mapping=aes(x=color),
stat="bin",
stat_params=list(),
geom="bar",
geom_params=list(),
position=position_identity()
)
FigureNum <<- 0 # Global variable
ggplot_func <- function(df,
Title = "Diamonds",
Legend = "color",   # Notice how this is handled below using the aes_string() function
PointColor = c("red", "blue", "green", "yellow", "grey", "black", "purple"), # See https://groups.google.com/forum/#!forum/ggplot2 for color choices.
Sizes = c(.5,.5,.5,.5,.5,.5,.5,.5),
AxisSize = 12,
TitleSize = 16,
LegendSize = 14,
YMin = 0,
YMax = max(df$price) * 1.1,
XMin = 0,
XMax = max(df$carat) * 1.1,
YLabel = 'price',
XLabel = 'carat',
Background = "grey97",
MinorGridColor = "snow2",
MajorGridColor = "snow3",
MinorGridSize = .5,
MajorGridSize = .5,
FigNum = -1,
FigNumOffset = 0
) {
if(FigNum != -1) FigNum = FigNum
else FigNum = {
FigureNum <<- FigureNum + 1
}
names(df)[names(df) == Legend] <- 'Legend'
p1 = ggplot() +
coord_cartesian() +
scale_x_continuous(breaks=c(seq(XMin,XMax,by=1)), minor_breaks=seq(XMin,XMax,by=1))  +
#scale_x_discrete() +
scale_y_continuous() +
scale_y_discrete() +
scale_colour_manual(values = PointColor) + # See http://docs.ggplot2.org/0.9.3.1/scale_manual.html for more information.
scale_color_discrete(name=Legend) + # This is not on the ggplot Cheat Sheet by the way.
#facet_wrap(~cut) +
#facet_grid(clarity~cut, labeller=label_both) +
labs(y = YLabel, x = paste(XLabel, '\nFigure', toString(FigNumOffset + FigNum)), title=Title) +
ylim(YMin, YMax) + xlim(XMin, XMax) +
# theme is now used, see http://docs.ggplot2.org/0.9.2.1/theme.html for more information.
theme(legend.text = element_text(size = LegendSize, face = "bold")) + # see http://www.cookbook-r.com/Graphs/Legends_(ggplot2) for more information.
theme(axis.text=element_text(size=12), axis.title=element_text(size=AxisSize,face="bold")) +
theme(plot.title = element_text(size=TitleSize,face="bold")) +
theme(panel.grid.major = element_line(colour=MajorGridColor, size=MajorGridSize)) +
theme(panel.grid.minor = element_line(colour=MinorGridColor, size=MinorGridSize)) +
theme(panel.background = element_rect(fill=Background, colour=Background)) +
layer(data=df,
# None of these worked for the following non-commented line:
#mapping=aes(x = carat, y = price, color = Legend),
#mapping=aes(x = carat, y = price, aes_string(color = Legend)),
#mapping=aes(x = carat, y = price, color = substitute(Legend))
# See http://stackoverflow.com/questions/32503843/using-a-function-parameter-in-ggplot-mapping-aes
# I fixed it by doing the names(df)[names(df) == Legend] <- 'Legend' above.
mapping=aes(x = carat, y = price, color = Legend),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
#position=position_dodge()
)
return(p1)
}
p1 <- ggplot_func(diamonds)
p1
p2 <- ggplot_func(diamonds, YMin = 5000, YMax = 15000)
p2
p3 <- ggplot_func(subset(diamonds, cut == "Premium"), Legend = "cut")
p3
p4 <- ggplot_func(diamonds, Legend = "clarity", PointColor = c("red", "blue", "green", "yellow", "grey", "black", "purple", "orange"))
p4
library("grid")
# You may need to use getwd() to find out where the "4diamonds.png" file will be put.
# You can use setwd() to set the current working directory.
png("4diamonds.png", width = 25, height = 20, units = "in", res = 72)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
# Print Plots
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(p4, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
dev.off()
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
View(df)
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
diamonds %>% mutate(minxy = pmin(x,y)) %>% view
diamonds %>% mutate(minxy = pmin(x,y)) %>% View()
c(1:10)
diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat)) + geom_point(aes(color=cut))
diamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;
diamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
require(tidyr)
require(dplyr)
require(ggplot2)
library(plyr)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
View
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price))
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% View
df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE)) %>% View
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_Es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
View(df)
View(ggplot_func)
require(ggplot2)
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_Es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price))
View(df)
require(dplyr)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price))
View(df)
head(diamonds)
df <- diamonds %>% group_by(color, clarity)
view(df)
View(df)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price))
View(df)
df <- diamonds %>% group_by(color, clarity)
View(df)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price))
View(df)
df <- diamonds %>% group_by(color, clarity)
source('~/Desktop/fall2015/CS 329E/DataVisualization/RWorkshop/12 Tableau/01 Crosstabs, KPIs, Barchart.R')
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
require(tidyr)
require(dplyr)
require(ggplot2)
df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
View(df)
source('~/Desktop/fall2015/CS 329E/DataVisualization/RWorkshop/12 Tableau/01 Crosstabs, KPIs, Barchart.R')
require("jsonlite")
require("RCurl")
source('~/Desktop/fall2015/CS 329E/DataVisualization/RWorkshop/12 Tableau/01 Crosstabs, KPIs, Barchart.R')
spread(df, COLOR, AVG_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_wrap(~CLARITY, ncol=1) +
labs(title='Diamonds Crosstab') +
labs(x=paste("COLOR"), y=paste("AVG_PRICE")) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE),
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue"),
position=position_identity()
) + coord_flip() +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-0.5),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE - WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-5),
position=position_identity()
) +
layer(data=df,
mapping=aes(yintercept = WINDOW_AVG_PRICE),
geom="hline",
geom_params=list(colour="red")
)
educated <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from educated"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='C##cs329e_Es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require("jsonlite")
require("RCurl")
require(dplyr)
educated <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from educated"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='C##cs329e_Es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require("jsonlite")
require("RCurl")
#Gather data from database fill into local data frame and retrieve headers and summary
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from educated"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df)
summary(df)
require("jsonlite")
require("RCurl")
#Gather data from database fill into local data frame and retrieve headers and summary
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from educated"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='c##cs329e_es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df)
summary(df)
require("jsonlite")
require("RCurl")
#Gather data from database fill into local data frame and retrieve headers and summary
df <- data.frame(fromJSON(getURL(URLencode('sayonara.microlab.cs.utexas.edu:5001/rest/native/?query="select * from educated"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='C##cs329e_es29937', PASS='orcl_es29937', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df)
summary(df)
setwd("~/Desktop/DV_TProject1/01 Data")
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/Desktop/DV_TProject1/01 Data")
file_path <- "data.reformatted.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
summary(df)
head(df)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/Desktop/DV_TProject1/01 Data")
file_path <- "data.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
# summary(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year", "Educated_Males", "Total_Males","Educated_Females","Total_Females")
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
source('~/.active-rstudio-document')
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/Desktop/datascrapping/01 Data")
file_path <- "data.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE) # table is a reserved word in Oracle so rename it to tbl.
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
df %>% View()
library(plyr)
measures <- c("facebook", "twitter")
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/Desktop/DV_TProject1/01 Data")
file_path <- "data.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE) # table is a reserved word in Oracle so rename it to tbl.
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
df %>% View()
library(plyr)
measures <- c("facebook", "twitter")
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
source('~/Desktop/DV_TProject1/01 Data/educationAchieved.R')
source('~/Desktop/DV_TProject1/01 Data/educationAchieved.R')
